+++
author = "alex"
title = "Teoría de Categorías en Scala - Tipos y funciones"
date = "2017-11-09T11:25:11+01:00"
categories = ["dev"]
mainclass = "dev"
image = "teoria-categorias-scala-tipos-funciones.png"
tags = ["scala", "teoría de categorías", "matemáticas"]
description = "¿Qué son los tipos y funciones en Teoría de Categorías? Piensa en los tipos como si fueran conjuntos."
draft = true
+++

{{< importPartial "structure/_ct_header.html" >}}

/En el artículo anterior escribí sobre/ [[https://elbauldelprogramador.com/teoria-categorias-scala-composicion/][composición en Teoría de Categorías]], /hoy voy a hablar sobre *tipos y funciones en Teoría de Categorías.*/

* Tipos y Funciones
Se pueden componer flechas, pero /no cualquier par de flechas/, el destino de una flecha debe coincidir con el origen de la otra. En términos de programación: *El tipo de retorno de una función debe coincidir con el tipo de entrada de la siguiente función.*


* ¿Qué son los tipos?
Puedes pensar en un *Tipo* como *Conjuntos*, estos pueden ser /finitos/ (Booleanos, Chars) o /infinitos/ (Cadenas de texto, Enteros). En teoría de categorías existe una [[https://es.wikipedia.org/wiki/Categor%C3%ADa_de_conjuntos][Categoría de Conjuntos]], llamada *Set* (Conjunto). En esta categoría, los objetos son *conjuntos*, y las flechas *funciones de un conjunto a otro.*

La definición de arriba es en /el mundo matemático/, en la realidad puedes pensar en los *conjuntos como tipos* en un lenguaje de programación y en las *funciones en el Set como funciones* en dicho lenguaje de programación. Pero hay un problema, en matemáticas una función simplemente /sabe la respuesta,/ pero en un lenguaje de programación eres tú quien debe implementar el código que calcule esa respuesta, y hay algunas funciones que nunca retornan. Como solución, muchos lenguajes de programación tienen un tipo llamado *Tipo de fondo*([[https://en.wikipedia.org/wiki/Bottom_type][Bottom type]]), todos los tipos extienden de él. En Haskell este tipo se denota por =_|_=, en [[https://elbauldelprogramador.com/tags/scala/][scala]] por =Nothing= (Puedes [[http://www.scala-lang.org/api/current/scala/Nothing.html][ver la documentación de este tipo]]). Una función que devuelve el tipo fondo se llama *Función Parcial*.

<!--more--><!--ad-->

* The Mathematical Model
If you are a developer, I am sure you have found yourself running an interpreter in your mind while debugging. We Humans aren't very good at this, since it is difficult to keep track of all variables. There is an alternative to know if a program is correct, it's called [[https://en.wikipedia.org/wiki/Denotational_semantics][Denotational Semantics]]. In short, *Denotational Semantics* is an approach of formalizing the /meanings/ of a programming language, it is concerned with finding mathematical objects called domains that represent what programs do.

Opposed to /Denotational Semantics/ is [[https://en.wikipedia.org/wiki/Operational_semantics][Operational Semantics]]. /Operational Semantics/ tries to proof certain properties of a program (such as correctness) by constructing logical proofs, this is often too complex.

By having a mathematical model (/Denotational semantics/) you can write formal proofs proving your software correctness.

* Pure & Dirty Functions
/Pure functions/ are those who always return the same result for the same input and without side effects. For example, mathematical functions are always pure. On the contrary, /dirty functions/ have side effects.

* Examples of types
Lets see now a few types, starting from the *Empty set*.

Which type would define an [[https://en.wikipedia.org/wiki/Empty_set][Empty Set]]? Think about it a moment, I've mentioned it above. In haskell this type is =Void=, in Scala =Nothing=. This Set has no elements. Previously I said there is a Category called /Set/, in which /Objects are sets/ and /Arrows are functions/. I this context, if =A= is a set, the empty set, only one function =f= exists from ={}= to =A=, the *empty function*.

Could you ever define a function that takes as parameter an object of type =Void= (/an empty set/)?, yes, you can, but you won't be able to call it, since you can't pass it a parameter which type is =Void=. However, the return type of this function could be any. This types of functions (Those who can return any type) are called *polymorphic in the return type*, here are some examples:

#+BEGIN_SRC haskell
cantCallMe :: Void -> a
#+END_SRC

A lower case letter in a function's declaration in haskell means =a= can be of any type. Here are examples in scala:

#+BEGIN_SRC scala
def cantCallMe(a:Nothing) = 1
def cantCallMe(a:Nothing) = "str"
#+END_SRC

Moving on, what Type would be the one corresponding to the *[[https://en.wikipedia.org/wiki/Singleton_(mathematics)][Singleton Set]]*?, that is, a type with only one element (one possible value). In C++ this type is =void=, not to be confused with Haskell's =Void=, =Void= is the empty set, whereas =void= in C++ is a singleton set, because its a set with only one element, in fact, you can call functions receiving =void= arguments. An example of such functions is =int f314() { ret 314 }=, you can call this function, and it will return always 314.

Although it may seems this function is not taking any arguments, it is. Because if you can't pass it an argument, you could not call it. So it is taking a dummy value with only one instance (a singleton set, in this case 314). Lets see the same example in Haskell and Scala:

#+BEGIN_SRC haskell
f314 :: () -> Integer -- from Unit to Integer
f314() = 314
#+END_SRC

Here it becomes clearer that =f314= is taking a parameter, the =Unit= type (allowing only one value). You call this function with =f314()=, which denotes more explicitly this function is taking one parameter.

In Scala this type is also called [[http://www.scala-lang.org/api/current/scala/Unit.html][Unit]], and its unique value is denoted also by =()=, as in Haskell:

#+BEGIN_SRC scala
def f314() = 314 /* from () => Int */
#+END_SRC

All this may be seems like nonsense, but we are building the concepts bottom up, as you delve more deeply into Category Theory, it will gain more and more sense. For example, with this knowledge you can avoid mentioning explicitly the elements in a set, now you can reference them with Arrows (Functions in this case, since we are in the Category of Sets). Functions going *from Unit to any type A* are in one-to-one correspondence with elements in that set A.

What about functions *returning =void= (C++), or =Unit= (Haskell, Scala)*? Usually this kind of functions have *side effects*, but if they are *pure* what they are doing is /mapping/ elements in a set A to a singleton, so, all elements in a set A will be mapped to the same value. Lets see a few examples:

#+BEGIN_SRC haskell
fInt :: Integer -> ()
f _ = ()
#+END_SRC

The special declaration using =_= means it does not matter what argument you pass in to =f=, as the argument type doesn't matter, you can define the function like this:

#+BEGIN_SRC haskell
unit :: a -> ()
unit _ = ()
#+END_SRC

It won't matter what type you pass to this function, it will always be mapped to =Unit=. Here is the scala equivalent:

#+BEGIN_SRC scala
def unit[T](a:T):Unit = ()
#+END_SRC

The next logical type to see is a *set with 2 elements,* which corresponds with =bool= in C++, =Bool= in Haskell and =Boolean= in Scala. Functions to booleans are called predicates, examples of this functions: =isDigit, isLower, isLetter= and so on.

* Challenges
Now I want to share with you two of the Challenges Bartosz proposes on his site that I solved. Please consider that they might be wrong or can be improved, I would like to hear your take on this challenges, so please comment below.
You can see the complete list of challenges on Bartosz website (Linked in the refernces), I've only solved #1 and #6.

- Challenge #1
Here is what I've done, I tried to do it with an immutable Map, but couldn't get it to work:

#+BEGIN_SRC scala
case class Memoize[A, B](f: A => B) {
  private[this] val values: mutable.Map[A,B] = mutable.Map.empty
  def apply(x: A) = values getOrElseUpdate(x, f(x))
}
#+END_SRC
you can test it with:
#+BEGIN_SRC scala
def f(a:Int) = {
  Thread.sleep(5000)
  a*a
}
val b = Memoize(f)
b(10) // Takes 5 secs
b(10) // immediate
#+END_SRC

- Challenge #6

<figure>
        <a href="/img/teoria-categorias-scala-tipos-funciones.png">
          <amp-img
            on="tap:lightbox1"
            role="button"
            tabindex="0"
            layout="responsive"
            src="/img/teoria-categorias-scala-tipos-funciones.png"
            alt="Scala Category Theory functions and types"
            title="Scala Category Theory functions and types"
            sizes="(min-width: 640px) 640px, 100vw"
            width="640"
            height="527">
          </amp-img>
        </a>
</figure>

* References
- [[https://bartoszmilewski.com/2014/11/24/types-and-functions/trackback/][Types and Functions, by Bartosz Milewski]]
